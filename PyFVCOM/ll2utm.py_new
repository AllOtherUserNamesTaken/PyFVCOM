import re
import utm

import numpy as np

def _test(inLat, inLong, inZone=None):
    """ Simple test of the functions with a given lat/long pair.

    Parameters
    ----------
    inLat, inLong : float
        Input latitude and longitude pair.

    """

    (z, e, n) = LLtoUTM(23, inLat, inLong, ZoneNumber=inZone)
    outLat, outLong = UTMtoLL(23, n, e, z)

    return z, e, n, outLat, outLong


def LLtoUTM(ReferenceEllipsoid, Lat, Long, ZoneNumber=None):
    """
    Converts lat/long to UTM coords.

    Lat, Long : float, ndarray
        Latitude and longitude values as floating point values. Negative
        coordinates are west and south for longitude and latitude respectively.

    ZoneNumber : str, optional
        UTM zone number in which the coordinates should be forced. This is
        useful if the spherical coordinates supplied in Lat and Long exceed
        a single UTM zone. Speficy both number and letter e.g. '30N'. If
        omitted, it is calculated automatically.

    Returns
    -------
    Zone : str, list
        UTM Zone for the coordinates supplied in Lat and Long.

    Easting, Northing : float, ndarray
        Cartesian coordinates for the positions in Lat and Long.

    Notes
    -----
    Pierre Cazenave (Plymouth Marine Laboratory)

    """

    if isinstance(Long, float) or isinstance(Long, int):
        res = utm.from_latlon(Lat, Long, force_zone_number=ZoneNumber)
        easting, northing, zonenumber, hemisphere = res
        zone = str(zonenumber) + hemisphere
    else:
        Long, Lat = np.asarray(Long), np.asarray(Lat)
        numpoints = len(Long)
        if len(Lat) != numpoints:
            raise ValueError('Mismatched coordinate array sizes.')

        easting, northing = np.empty(numpoints), np.empty(numpoints)
        zone, hemisphere = [], []

        for c, pos in enumerate(zip(Lat, Long)):
            res = utm.from_latlon(pos[0], pos[1], force_zone_number=ZoneNumber)
            easting[c] = res[0]
            northing[c] = res[1]
            zone.append(str(res[2]) + res[3])

    return zone, easting, northing


def UTMtoLL(ReferenceEllipsoid, northing, easting, zone):
    """
    Converts UTM coords to lat/long.

    East Longitudes are positive, west longitudes are negative. North latitudes
    are positive, south latitudes are negative. Lat and Long are in decimal
    degrees.

    Reference ellipsoid is WGS84.

    northing, easting : float, ndarray
        Latitude and longitude values as floating point values. Negative
        coordinates are west and south for longitude and latitude respectively.

    zone : str, optional
        UTM zone number in which the coordinates are referenced.

    Reutrns
    -------
    Lat, Long : ndarray
        Latitude and longitudes for the coordinates in easting and northing.

    Notes
    -----
    Pierre Cazenave (Plymouth Marine Laboratory)

    """

    if isinstance(easting, float) or isinstance(easting, int):
        # Pull out the zone and number from zone.
        zone_number, zone_letter = re.findall('\d+|\D+', zone)
        zone_number = int(zone_number)
        Lat, Long = utm.to_latlon(easting, northing, zone_number, zone_letter)
    else:
        easting, nothing = np.asarray(easting), np.asarray(northing)
        numpoints = len(easting)
        if len(northing) != numpoints:
            raise ValueError('Mismatched coordinate array sizes.')

        Lat, Long = np.empty(numpoints), np.empty(numpoints)

        for c, pos in enumerate(zip(easting, northing, zone)):
            zone_number, zone_letter = re.findall('\d+|\D+', pos[2])
            zone_number = int(zone_number)
            latlong = utm.to_latlon(pos[0], pos[1], zone_number, zone_letter)

            Lat[c] = latlong[0]
            Long[c] = latlong[1]

    return Lat, Long


if __name__ == '__main__':

    print('\nTest with NumPy single values')
    latTest, lonTest = 50, -5
    z, e, n, outLat, outLong = _test(latTest, lonTest)
    print("Input (lat/long): {}, {}\nOutput (lat/long): {} {}".format(
        latTest, lonTest, outLat, outLong))
    print("Intermediate UTM: {}, {}, {}".format(e, n, z))

    print('\nTest with lists')
    latTest, lonTest = [50, 55], [-5, -20]
    z, e, n, outLat, outLong = _test(latTest, lonTest)
    for c in range(len(latTest)):
        print("Input (lat/long): {}, {}\nOutput (lat/long): {} {}".format(
            latTest[c], lonTest[c], outLat[c], outLong[c]))
        print("Intermediate UTM: {}, {}, {}".format(e[c], n[c], z[c]))

    print('\nTest with NumPy arrays')
    latTest, lonTest = np.asarray([50, 55]), np.asarray([-5, -20])
    z, e, n, outLat, outLong = _test(latTest, lonTest)
    for c in range(len(latTest)):
        print("Input (lat/long): {}, {}\nOutput (lat/long): {} {}".format(
            latTest[c], lonTest[c], outLat[c], outLong[c]))
        print("Intermediate UTM: {}, {}, {}".format(e[c], n[c], z[c]))

    print('\nTest with NumPy arrays but a single zone')
    latTest, lonTest = np.asarray([50, 55]), np.asarray([-5, -20])
    z, e, n, outLat, outLong = _test(latTest, lonTest, inZone=30)
    for c in range(len(latTest)):
        print("Input (lat/long): {}, {}\nOutput (lat/long): {} {}".format(
            latTest[c], lonTest[c], outLat[c], outLong[c]))
        print("Intermediate UTM: {}, {}, {}".format(e[c], n[c], z[c]))
